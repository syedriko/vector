// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one <i>delivery destination</i> in your account. A delivery destination is an Amazon Web Services resource that represents an shared id="AWS"/&gt; service that logs can be sent to. CloudWatch Logs, Amazon S3, are supported as Kinesis Data Firehose delivery destinations.</p>
/// <p>To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:</p>
/// <ul>
/// <li> <p>Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html">PutDeliverySource</a>.</p> </li>
/// <li> <p>Create a <i>delivery destination</i>, which is a logical object that represents the actual delivery destination. </p> </li>
/// <li> <p>If you are delivering logs cross-account, you must use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliveryDestinationolicy.html">PutDeliveryDestinationPolicy</a> in the destination account to assign an IAM policy to the destination. This policy allows delivery to that destination. </p> </li>
/// <li> <p>Create a <i>delivery</i> by pairing exactly one delivery source and one delivery destination. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html">CreateDelivery</a>.</p> </li>
/// </ul>
/// <p>You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeliveryDestination {
    /// <p>The name of this delivery destination.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.</p>
    pub delivery_destination_type: ::std::option::Option<crate::types::DeliveryDestinationType>,
    /// <p>The format of the logs that are sent to this delivery destination. </p>
    pub output_format: ::std::option::Option<crate::types::OutputFormat>,
    /// <p>A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.</p>
    pub delivery_destination_configuration: ::std::option::Option<crate::types::DeliveryDestinationConfiguration>,
    /// <p>The tags that have been assigned to this delivery destination.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl DeliveryDestination {
    /// <p>The name of this delivery destination.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.</p>
    pub fn delivery_destination_type(&self) -> ::std::option::Option<&crate::types::DeliveryDestinationType> {
        self.delivery_destination_type.as_ref()
    }
    /// <p>The format of the logs that are sent to this delivery destination. </p>
    pub fn output_format(&self) -> ::std::option::Option<&crate::types::OutputFormat> {
        self.output_format.as_ref()
    }
    /// <p>A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.</p>
    pub fn delivery_destination_configuration(&self) -> ::std::option::Option<&crate::types::DeliveryDestinationConfiguration> {
        self.delivery_destination_configuration.as_ref()
    }
    /// <p>The tags that have been assigned to this delivery destination.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl DeliveryDestination {
    /// Creates a new builder-style object to manufacture [`DeliveryDestination`](crate::types::DeliveryDestination).
    pub fn builder() -> crate::types::builders::DeliveryDestinationBuilder {
        crate::types::builders::DeliveryDestinationBuilder::default()
    }
}

/// A builder for [`DeliveryDestination`](crate::types::DeliveryDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeliveryDestinationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) delivery_destination_type: ::std::option::Option<crate::types::DeliveryDestinationType>,
    pub(crate) output_format: ::std::option::Option<crate::types::OutputFormat>,
    pub(crate) delivery_destination_configuration: ::std::option::Option<crate::types::DeliveryDestinationConfiguration>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl DeliveryDestinationBuilder {
    /// <p>The name of this delivery destination.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this delivery destination.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this delivery destination.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.</p>
    pub fn delivery_destination_type(mut self, input: crate::types::DeliveryDestinationType) -> Self {
        self.delivery_destination_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.</p>
    pub fn set_delivery_destination_type(mut self, input: ::std::option::Option<crate::types::DeliveryDestinationType>) -> Self {
        self.delivery_destination_type = input;
        self
    }
    /// <p>Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.</p>
    pub fn get_delivery_destination_type(&self) -> &::std::option::Option<crate::types::DeliveryDestinationType> {
        &self.delivery_destination_type
    }
    /// <p>The format of the logs that are sent to this delivery destination. </p>
    pub fn output_format(mut self, input: crate::types::OutputFormat) -> Self {
        self.output_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the logs that are sent to this delivery destination. </p>
    pub fn set_output_format(mut self, input: ::std::option::Option<crate::types::OutputFormat>) -> Self {
        self.output_format = input;
        self
    }
    /// <p>The format of the logs that are sent to this delivery destination. </p>
    pub fn get_output_format(&self) -> &::std::option::Option<crate::types::OutputFormat> {
        &self.output_format
    }
    /// <p>A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.</p>
    pub fn delivery_destination_configuration(mut self, input: crate::types::DeliveryDestinationConfiguration) -> Self {
        self.delivery_destination_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.</p>
    pub fn set_delivery_destination_configuration(mut self, input: ::std::option::Option<crate::types::DeliveryDestinationConfiguration>) -> Self {
        self.delivery_destination_configuration = input;
        self
    }
    /// <p>A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.</p>
    pub fn get_delivery_destination_configuration(&self) -> &::std::option::Option<crate::types::DeliveryDestinationConfiguration> {
        &self.delivery_destination_configuration
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that have been assigned to this delivery destination.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags that have been assigned to this delivery destination.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that have been assigned to this delivery destination.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`DeliveryDestination`](crate::types::DeliveryDestination).
    pub fn build(self) -> crate::types::DeliveryDestination {
        crate::types::DeliveryDestination {
            name: self.name,
            arn: self.arn,
            delivery_destination_type: self.delivery_destination_type,
            output_format: self.output_format,
            delivery_destination_configuration: self.delivery_destination_configuration,
            tags: self.tags,
        }
    }
}
